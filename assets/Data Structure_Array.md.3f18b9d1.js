import{_ as a,o as t,c as e,Q as r}from"./chunks/framework.06b9d6ab.js";const m=JSON.parse('{"title":"数组","description":"","frontmatter":{},"headers":[],"relativePath":"Data Structure/Array.md","filePath":"Data Structure/Array.md","lastUpdated":1683440492000}'),o={name:"Data Structure/Array.md"},i=r('<h1 id="数组" tabindex="-1">数组 <a class="header-anchor" href="#数组" aria-label="Permalink to &quot;数组&quot;">​</a></h1><h2 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to &quot;概述&quot;">​</a></h2><p>数组是一种将元素存储在连续内存空间的数据结构，元素在数组中的位置被称为元素的索引。</p><h3 id="优点" tabindex="-1">优点 <a class="header-anchor" href="#优点" aria-label="Permalink to &quot;优点&quot;">​</a></h3><p>正如刚才提到的“存储在连续内存空间”，所以计算每个元素的具体的内存地址就非常容易。 只要给定数组首个元素的地址和某个元素的索引，就可以按照：<strong>数组元素地址=数组内存地址+元素长度*元素索引</strong>这个公式来计算该元素的具体位置。 所以<strong>数组的访问是非常高效的</strong>。</p><h3 id="缺点" tabindex="-1">缺点 <a class="header-anchor" href="#缺点" aria-label="Permalink to &quot;缺点&quot;">​</a></h3><ol><li>数组长度是无法扩展的。 如果想要扩容数组，则需新声明一个数组，然后把原数组元素依次拷贝到新数组。那么如果数组很大，会非常耗时。</li><li>数组的增删非常麻烦。 由数组的性质得知，数组的存储方式是连续的。所以如果我们需要增/删某个元素，实际上不仅仅是插入或者删除了一个元素，而是所有该元素后面的元素都需要后移/前移</li></ol><p>在javaScript中数组其实与“传统”的数组有所不同,</p>',8),n=[i];function s(l,c,d,_,h,p){return t(),e("div",null,n)}const f=a(o,[["render",s]]);export{m as __pageData,f as default};
