import{_ as s,o as n,c as a,Q as p}from"./chunks/framework.06b9d6ab.js";const D=JSON.parse('{"title":"LeetCode 105.从前序与中序遍历序列构造二叉树","description":"","frontmatter":{},"headers":[],"relativePath":"Algorithm/Binary Tree/105.从前序与中序遍历序列构造二叉树.md","filePath":"Algorithm/Binary Tree/105.从前序与中序遍历序列构造二叉树.md","lastUpdated":1680277235000}'),l={name:"Algorithm/Binary Tree/105.从前序与中序遍历序列构造二叉树.md"},o=p(`<h1 id="leetcode-105-从前序与中序遍历序列构造二叉树" tabindex="-1"><a href="https://leetcode.cn/problems/construct-binary-tree-from-preorder-and-inorder-traversal/" target="_blank" rel="noreferrer">LeetCode 105.从前序与中序遍历序列构造二叉树</a> <a class="header-anchor" href="#leetcode-105-从前序与中序遍历序列构造二叉树" aria-label="Permalink to &quot;[LeetCode 105.从前序与中序遍历序列构造二叉树](https://leetcode.cn/problems/construct-binary-tree-from-preorder-and-inorder-traversal/)&quot;">​</a></h1><p>给定两个整数数组<code>preorder</code>和<code>inorder</code>，其中<code>preorder</code>是二叉树的先序遍历，<code>inorder</code>是同一棵树的中序遍历，请构造二叉树并返回其根节点。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/02/19/tree.jpg" alt="示例1" title="示例1"></p><blockquote><p>输入: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]<br> 输出: [3,9,20,null,null,15,7]</p></blockquote><p><strong>示例 2:</strong></p><blockquote><p>输入: preorder = [-1], inorder = [-1]<br> 输出: [-1]</p></blockquote><p>提示:</p><ul><li><code>1 &lt;= preorder.length &lt;= 3000</code></li><li><code>inorder.length == preorder.length</code></li><li><code>-3000 &lt;= preorder[i]</code>, <code>inorder[i] &lt;= 3000</code></li><li><code>preorder</code>和<code>inorder</code>均<strong>无重复元素</strong></li><li><code>inorder</code>均出现在<code>preorder</code></li><li><code>preorder</code><strong>保证</strong>为二叉树的前序遍历序列</li><li><code>inorder</code><strong>保证</strong>为二叉树的中序遍历序列</li></ul><p>函数签名:</p><div class="language-javaScript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javaScript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{number[]}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">preorder</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{number[]}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">inorder</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@return</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{TreeNode}</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">buildTree</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">preorder</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">inorder</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{number[]}</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">preorder</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{number[]}</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">inorder</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@return</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{TreeNode}</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">buildTree</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">preorder</span><span style="color:#24292E;">, </span><span style="color:#E36209;">inorder</span><span style="color:#24292E;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><h2 id="思路" tabindex="-1">思路 <a class="header-anchor" href="#思路" aria-label="Permalink to &quot;思路&quot;">​</a></h2><h3 id="分解" tabindex="-1">分解 <a class="header-anchor" href="#分解" aria-label="Permalink to &quot;分解&quot;">​</a></h3><p>这道题对我来说是一个新的难度等级，他综合考察了前序和中序遍历的理解。以及对分解问题思路进行了考察。</p><p>首先对于前序遍历和中序遍历来说，只是在递归遍历整个二叉树的过程中，对节点处理的位置不同。</p><p>对于前序遍历来说，遍历结果的第一个值必定是树的根节点<code>root</code>,我们可以用<code>root</code>的值在中序遍历的结果中寻找它所在的位置。</p><p>对于中序遍历来说，我们得到了树的根节点的索引位置。在结果中，这个索引位置的左侧就是左子树，右侧就是右子树。</p><p>此时，我们需要分解递归构造左右子树。思路比较细碎，以注释的方式写在代码中。</p><p>代码如下：</p><div class="language-javaScript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javaScript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{number[]}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">preorder</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{number[]}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">inorder</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@return</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{TreeNode}</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">buildTree</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">preorder</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">inorder</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">preorder</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">preStart</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">preEnd</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">inorder</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">inStart</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">inEnd</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//递归出口 边界值</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (inStart </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> inEnd </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> preStart </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> preEnd) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//子树的根节点是前序遍历的第一个值，我们用preorder[preStart]获取</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> preRootValue </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> preorder[preStart];</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//通过拿到的子树根结点的值，找中序遍历中这个节点的位置</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> preRootIndex </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> inorder.</span><span style="color:#B392F0;">indexOf</span><span style="color:#E1E4E8;">(preRootValue);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//构造一个根节点</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> root </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TreeNode</span><span style="color:#E1E4E8;">(preRootValue);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 开始递归构造子树，首先传入子树的都是preorder,inorder这两个数组，不会构造新的数组，我们需要思考的是指针的值。</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 左子树思路</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 1.定义先序遍历值范围：</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//    左边界preStart：上一个根节点的值是上一个先序遍历范围的第一个值preorder[preStart]，所以这一次先序遍历的左边界就是上一次的preStart+1</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//    右边界preEnd：想要知道左子树先序遍历的右边界，我们需要知道左子树的长度。</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//               左子树的长度可以根据上一次inorder的inStart和preRootIndex来推算 length=preRootIndex-inStart</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//               知道了左子树的长度，左子树的右边界=左边界+长度=preStart+length=preRootIndex-inStart</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 2.定义中序遍历值范围：</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//    左边界inStart：左边界是固定的inStart直到递归结束</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//    右边界inEnd：中序遍历的有边界的指针指向上一个根节点的左侧，所以是preRootIndex-1</span></span>
<span class="line"><span style="color:#E1E4E8;">        root.left </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">(preorder, preStart </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, preStart </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> preRootIndex </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> inStart, inorder, inStart, preRootIndex </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//右子树思路</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 1.定义先序遍历值范围：</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//    左边界preStart：我们在左子树的梳理中已经推算出了左子树的右边界。所以右子树的左边界=左子树的右边界+1</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//    右边界preEnd：如同左子树中序遍历的左边界一样，右子树先序遍历的右边界是固定的preEnd直到递归结束</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 2.定义中序遍历值范围：</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//    左边界inStart：preRootIndex是分割中序遍历左右子树的点，所以右子树的中序遍历左边界=preRootIndex+1</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//    右边界inEnd：简单的，右子树中序遍历的右边界是固定的inEnd直到递归结束</span></span>
<span class="line"><span style="color:#E1E4E8;">        root.right </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">(preorder, preStart </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> preRootIndex </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> inStart </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, preEnd, inorder, preRootIndex </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, inEnd)</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> root</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">(preorder, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, preorder.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, inorder, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, inorder.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{number[]}</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">preorder</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{number[]}</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">inorder</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@return</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{TreeNode}</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">buildTree</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">preorder</span><span style="color:#24292E;">, </span><span style="color:#E36209;">inorder</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">build</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">preorder</span><span style="color:#24292E;">, </span><span style="color:#E36209;">preStart</span><span style="color:#24292E;">, </span><span style="color:#E36209;">preEnd</span><span style="color:#24292E;">, </span><span style="color:#E36209;">inorder</span><span style="color:#24292E;">, </span><span style="color:#E36209;">inStart</span><span style="color:#24292E;">, </span><span style="color:#E36209;">inEnd</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//递归出口 边界值</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (inStart </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> inEnd </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> preStart </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> preEnd) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//子树的根节点是前序遍历的第一个值，我们用preorder[preStart]获取</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> preRootValue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> preorder[preStart];</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//通过拿到的子树根结点的值，找中序遍历中这个节点的位置</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> preRootIndex </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> inorder.</span><span style="color:#6F42C1;">indexOf</span><span style="color:#24292E;">(preRootValue);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//构造一个根节点</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> root </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TreeNode</span><span style="color:#24292E;">(preRootValue);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 开始递归构造子树，首先传入子树的都是preorder,inorder这两个数组，不会构造新的数组，我们需要思考的是指针的值。</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 左子树思路</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 1.定义先序遍历值范围：</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//    左边界preStart：上一个根节点的值是上一个先序遍历范围的第一个值preorder[preStart]，所以这一次先序遍历的左边界就是上一次的preStart+1</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//    右边界preEnd：想要知道左子树先序遍历的右边界，我们需要知道左子树的长度。</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//               左子树的长度可以根据上一次inorder的inStart和preRootIndex来推算 length=preRootIndex-inStart</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//               知道了左子树的长度，左子树的右边界=左边界+长度=preStart+length=preRootIndex-inStart</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 2.定义中序遍历值范围：</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//    左边界inStart：左边界是固定的inStart直到递归结束</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//    右边界inEnd：中序遍历的有边界的指针指向上一个根节点的左侧，所以是preRootIndex-1</span></span>
<span class="line"><span style="color:#24292E;">        root.left </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">(preorder, preStart </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, preStart </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> preRootIndex </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> inStart, inorder, inStart, preRootIndex </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//右子树思路</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 1.定义先序遍历值范围：</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//    左边界preStart：我们在左子树的梳理中已经推算出了左子树的右边界。所以右子树的左边界=左子树的右边界+1</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//    右边界preEnd：如同左子树中序遍历的左边界一样，右子树先序遍历的右边界是固定的preEnd直到递归结束</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 2.定义中序遍历值范围：</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//    左边界inStart：preRootIndex是分割中序遍历左右子树的点，所以右子树的中序遍历左边界=preRootIndex+1</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//    右边界inEnd：简单的，右子树中序遍历的右边界是固定的inEnd直到递归结束</span></span>
<span class="line"><span style="color:#24292E;">        root.right </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">(preorder, preStart </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> preRootIndex </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> inStart </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, preEnd, inorder, preRootIndex </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, inEnd)</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> root</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">(preorder, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, preorder.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, inorder, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, inorder.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div>`,20),e=[o];function r(t,c,y,E,i,d){return n(),a("div",null,e)}const F=s(l,[["render",r]]);export{D as __pageData,F as default};
