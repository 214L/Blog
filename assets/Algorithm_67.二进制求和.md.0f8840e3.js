import{_ as e,o as t,c as a,Q as o}from"./chunks/framework.06b9d6ab.js";const b=JSON.parse('{"title":"LeetCode 67 二进制求和","description":"","frontmatter":{},"headers":[],"relativePath":"Algorithm/67.二进制求和.md","filePath":"Algorithm/67.二进制求和.md","lastUpdated":1680096351000}'),l={name:"Algorithm/67.二进制求和.md"},r=o('<h1 id="leetcode-67-二进制求和" tabindex="-1"><a href="https://leetcode.cn/problems/add-binary/" target="_blank" rel="noreferrer">LeetCode 67 二进制求和</a> <a class="header-anchor" href="#leetcode-67-二进制求和" aria-label="Permalink to &quot;[LeetCode 67 二进制求和](https://leetcode.cn/problems/add-binary/)&quot;">​</a></h1><p>​ 给你两个二进制字符串 a 和 b ，以二进制字符串的形式返回它们的和。</p><blockquote><p>示例 1：</p><p>输入:a = &quot;11&quot;, b = &quot;1&quot; 输出：&quot;100&quot; 示例 2：</p><p>输入：a = &quot;1010&quot;, b = &quot;1011&quot; 输出：&quot;10101&quot;</p></blockquote><blockquote><p>提示：</p></blockquote><blockquote><p>1 &lt;= a.length, b.length &lt;= 104 a 和 b 仅由字符 &#39;0&#39; 或 &#39;1&#39; 组成 字符串如果不是 &quot;0&quot; ，就不含前导零</p></blockquote><h3 id="思路" tabindex="-1">思路 <a class="header-anchor" href="#思路" aria-label="Permalink to &quot;思路&quot;">​</a></h3><h3 id="题解" tabindex="-1">题解 <a class="header-anchor" href="#题解" aria-label="Permalink to &quot;题解&quot;">​</a></h3><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"></span></code></pre></div>',8),s=[r];function c(d,n,i,p,h,u){return t(),a("div",null,s)}const q=e(l,[["render",c]]);export{b as __pageData,q as default};
