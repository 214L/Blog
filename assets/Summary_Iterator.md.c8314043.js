import{_ as t,o as e,c as a,Q as r}from"./chunks/framework.06b9d6ab.js";const u=JSON.parse('{"title":"Iterator","description":"","frontmatter":{},"headers":[],"relativePath":"Summary/Iterator.md","filePath":"Summary/Iterator.md","lastUpdated":1697014379000}'),o={name:"Summary/Iterator.md"},c=r('<h1 id="iterator" tabindex="-1">Iterator <a class="header-anchor" href="#iterator" aria-label="Permalink to &quot;Iterator&quot;">​</a></h1><blockquote><p>MDN:<code>Symbol.iterator</code>为每一个对象定义了默认的迭代器。该迭代器可以被<code>for...of</code>循环使用。</p></blockquote><h2 id="什么是iterator" tabindex="-1">什么是iterator <a class="header-anchor" href="#什么是iterator" aria-label="Permalink to &quot;什么是iterator&quot;">​</a></h2><p>JavaScript 表示“集合”的数据结构，主要是<code>Array</code>和<code>Object</code>ES6又添加了<code>Map</code>和<code>Set</code>。</p><p>需要一种统一的接口机制，来处理所有不同的数据结构。**遍历器（Iterator）**就是这样一种机制。它是一种接口，为各种数据结构提供统一的访问机制。 任何数据结构只要部署 Iterator 接口，就可以完成遍历操作。</p><h2 id="iterator的遍历过程" tabindex="-1">iterator的遍历过程 <a class="header-anchor" href="#iterator的遍历过程" aria-label="Permalink to &quot;iterator的遍历过程&quot;">​</a></h2><p>（1）创建一个指针对象，指向当前数据结构的起始位置。也就是说，遍历器对象本质上，就是一个指针对象。</p><p>（2）第一次调用指针对象的next方法，可以将指针指向数据结构的第一个成员。</p><p>（3）第二次调用指针对象的next方法，指针就指向数据结构的第二个成员。</p><p>（4）不断调用指针对象的next方法，直到它指向数据结构的结束位置。</p>',10),i=[c];function d(n,p,s,_,l,h){return e(),a("div",null,i)}const f=t(o,[["render",d]]);export{u as __pageData,f as default};
