import{_ as s,o as n,c as a,Q as p}from"./chunks/framework.06b9d6ab.js";const D=JSON.parse('{"title":"LeetCode 106.从中序与后序遍历序列构造二叉树","description":"","frontmatter":{},"headers":[],"relativePath":"Algorithm/Binary Tree/106.从中序与后序遍历序列构造二叉树.md","filePath":"Algorithm/Binary Tree/106.从中序与后序遍历序列构造二叉树.md","lastUpdated":1680792373000}'),o={name:"Algorithm/Binary Tree/106.从中序与后序遍历序列构造二叉树.md"},l=p(`<h1 id="leetcode-106-从中序与后序遍历序列构造二叉树" tabindex="-1"><a href="https://leetcode.cn/problems/construct-binary-tree-from-inorder-and-postorder-traversal/" target="_blank" rel="noreferrer">LeetCode 106.从中序与后序遍历序列构造二叉树</a> <a class="header-anchor" href="#leetcode-106-从中序与后序遍历序列构造二叉树" aria-label="Permalink to &quot;[LeetCode 106.从中序与后序遍历序列构造二叉树](https://leetcode.cn/problems/construct-binary-tree-from-inorder-and-postorder-traversal/)&quot;">​</a></h1><p>给定两个整数数组 inorder 和 postorder ，其中 inorder 是二叉树的中序遍历， postorder 是同一棵树的后序遍历，请你构造并返回这颗   二叉树  。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/02/19/tree.jpg" alt="示例1" title="示例1"></p><blockquote><p>输入: inorder = [9,3,15,20,7], postorder = [9,15,7,20,3]<br> 输出: [3,9,20,null,null,15,7]</p></blockquote><p><strong>示例 2:</strong></p><blockquote><p>输入: inorder = [-1], postorder = [-1]<br> 输出: [-1]</p></blockquote><p>提示:</p><ul><li><code>1 &lt;= inorder.length &lt;= 3000</code></li><li><code>postorder.length == inorder.length</code></li><li><code>-3000 &lt;= inorder[i]</code>, <code>postorder[i] &lt;= 3000</code></li><li><code>inorder</code>和<code>postorder</code>都由<strong>不同</strong>的值组成</li><li><code>postorder</code>均出现在<code>inorder</code></li><li><code>inorder</code><strong>保证</strong>为树的中序遍历序列</li><li><code>postorder</code><strong>保证</strong>为树的后序遍历序列</li></ul><p>函数签名:</p><div class="language-javaScript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javaScript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{number[]}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">inorder</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{number[]}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">postorder</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@return</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{TreeNode}</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">buildTree</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">inorder</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">postorder</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{number[]}</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">inorder</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{number[]}</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">postorder</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@return</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{TreeNode}</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">buildTree</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;">(</span><span style="color:#E36209;">inorder</span><span style="color:#24292E;">, </span><span style="color:#E36209;">postorder</span><span style="color:#24292E;">) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><h2 id="思路" tabindex="-1">思路 <a class="header-anchor" href="#思路" aria-label="Permalink to &quot;思路&quot;">​</a></h2><h3 id="分解" tabindex="-1">分解 <a class="header-anchor" href="#分解" aria-label="Permalink to &quot;分解&quot;">​</a></h3><p>这道题其实是 105 的另一种情况。105 由先序遍历和中序遍历确定，本题由中序遍历和后序遍历确定。</p><p>整体思路是一样的，区别在于前序遍历和后续遍历的顺序不同。本质上都是对 4 个指针的判断和操作。</p><p>仍然以分解递归的方式来解决。</p><p>代码如下：</p><div class="language-javaScript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javaScript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{number[]}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">inorder</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@param</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{number[]}</span><span style="color:#6A737D;"> </span><span style="color:#E1E4E8;">postorder</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#F97583;">@return</span><span style="color:#6A737D;"> </span><span style="color:#B392F0;">{TreeNode}</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">buildTree</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">inorder</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">postorder</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">inorder</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">inStart</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">inEnd</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">postorder</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">postStart</span><span style="color:#E1E4E8;">,</span><span style="color:#FFAB70;">postEnd</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//递归出口 边界值</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;"> (inStart </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> inEnd </span><span style="color:#F97583;">||</span><span style="color:#E1E4E8;"> postStart </span><span style="color:#F97583;">&gt;</span><span style="color:#E1E4E8;"> postEnd) </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">null</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//子树的根节点是后续遍历的第最后一个值，我们用postorder[postEnd]获取</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> preRootValue </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> postorder[postEnd];</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//通过拿到的子树根结点的值，找中序遍历中这个节点的位置</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> preRootIndex </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> inorder.</span><span style="color:#B392F0;">indexOf</span><span style="color:#E1E4E8;">(preRootValue);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//构造一个根节点</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> root </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">TreeNode</span><span style="color:#E1E4E8;">(preRootValue);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 左子树思路</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 1.定义中序遍历值范围：首先我们可以根据中序遍历确定左子树的长度 length = preRootIndex-inStart</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//    左边界inStart：知道了左子树的长度 左边界就是inStart</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//    右边界inEnd：左子树的有边界紧挨着root节点 所以是 preRootIndex - 1</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 2.定义后序遍历值范围：</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//    左边界postStart：对于后序遍历左右中来说 左子树是靠近开头的一端 所以 postStart 始终是最左侧 postStart</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//    右边界postEnd：确定了postStart之后 也知道了左子树的长度 postEnd = postStart + lenght - 1</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> length </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> preRootIndex </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> inStart;</span></span>
<span class="line"><span style="color:#E1E4E8;">        root.left </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">(inorder,inStart,preRootIndex </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, postorder,postStart,postStart</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">length</span><span style="color:#F97583;">-</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//右子树思路</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 1.定义中序遍历值范围：</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//    左边界inStart：preRootIndex是分割中序遍历左右子树的点，所以右子树的中序遍历左边界 = preRootIndex + 1</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//    右边界inEnd：简单的，右子树中序遍历的右边界是固定的inEnd直到递归结束</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">// 2.定义后序遍历值范围：</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//    左边界postStart：左右中 右子树的开头应该是左子树右边界+1 = 左子树开头+左子树长度 = postStart + length</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#6A737D;">//    右边界postEnd：右子树的右边界应该是 上一个右边界 - 1</span></span>
<span class="line"><span style="color:#E1E4E8;">        root.right </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">(inorder,preRootIndex </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,inEnd,postorder,postStart </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> length,postEnd </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> root</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">build</span><span style="color:#E1E4E8;">(inorder, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, inorder.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">,postorder, </span><span style="color:#79B8FF;">0</span><span style="color:#E1E4E8;">, postorder.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">/**</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{number[]}</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">inorder</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@param</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{number[]}</span><span style="color:#6A737D;"> </span><span style="color:#24292E;">postorder</span></span>
<span class="line"><span style="color:#6A737D;"> * </span><span style="color:#D73A49;">@return</span><span style="color:#6A737D;"> </span><span style="color:#6F42C1;">{TreeNode}</span></span>
<span class="line"><span style="color:#6A737D;"> */</span></span>
<span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">buildTree</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">inorder</span><span style="color:#24292E;">, </span><span style="color:#E36209;">postorder</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">build</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> (</span><span style="color:#E36209;">inorder</span><span style="color:#24292E;">, </span><span style="color:#E36209;">inStart</span><span style="color:#24292E;">, </span><span style="color:#E36209;">inEnd</span><span style="color:#24292E;">,</span><span style="color:#E36209;">postorder</span><span style="color:#24292E;">,</span><span style="color:#E36209;">postStart</span><span style="color:#24292E;">,</span><span style="color:#E36209;">postEnd</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//递归出口 边界值</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;"> (inStart </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> inEnd </span><span style="color:#D73A49;">||</span><span style="color:#24292E;"> postStart </span><span style="color:#D73A49;">&gt;</span><span style="color:#24292E;"> postEnd) </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">null</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//子树的根节点是后续遍历的第最后一个值，我们用postorder[postEnd]获取</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> preRootValue </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> postorder[postEnd];</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//通过拿到的子树根结点的值，找中序遍历中这个节点的位置</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> preRootIndex </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> inorder.</span><span style="color:#6F42C1;">indexOf</span><span style="color:#24292E;">(preRootValue);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//构造一个根节点</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> root </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">TreeNode</span><span style="color:#24292E;">(preRootValue);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 左子树思路</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 1.定义中序遍历值范围：首先我们可以根据中序遍历确定左子树的长度 length = preRootIndex-inStart</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//    左边界inStart：知道了左子树的长度 左边界就是inStart</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//    右边界inEnd：左子树的有边界紧挨着root节点 所以是 preRootIndex - 1</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 2.定义后序遍历值范围：</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//    左边界postStart：对于后序遍历左右中来说 左子树是靠近开头的一端 所以 postStart 始终是最左侧 postStart</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//    右边界postEnd：确定了postStart之后 也知道了左子树的长度 postEnd = postStart + lenght - 1</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> length </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> preRootIndex </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> inStart;</span></span>
<span class="line"><span style="color:#24292E;">        root.left </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">(inorder,inStart,preRootIndex </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, postorder,postStart,postStart</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">length</span><span style="color:#D73A49;">-</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//右子树思路</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 1.定义中序遍历值范围：</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//    左边界inStart：preRootIndex是分割中序遍历左右子树的点，所以右子树的中序遍历左边界 = preRootIndex + 1</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//    右边界inEnd：简单的，右子树中序遍历的右边界是固定的inEnd直到递归结束</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">// 2.定义后序遍历值范围：</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//    左边界postStart：左右中 右子树的开头应该是左子树右边界+1 = 左子树开头+左子树长度 = postStart + length</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#6A737D;">//    右边界postEnd：右子树的右边界应该是 上一个右边界 - 1</span></span>
<span class="line"><span style="color:#24292E;">        root.right </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">(inorder,preRootIndex </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,inEnd,postorder,postStart </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> length,postEnd </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> root</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">build</span><span style="color:#24292E;">(inorder, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, inorder.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">,postorder, </span><span style="color:#005CC5;">0</span><span style="color:#24292E;">, postorder.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">-</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div>`,18),e=[l];function t(r,c,y,E,i,d){return n(),a("div",null,e)}const F=s(o,[["render",t]]);export{D as __pageData,F as default};
