import{_ as s,o as a,c as o,Q as n}from"./chunks/framework.06b9d6ab.js";const u=JSON.parse('{"title":"Proxy","description":"","frontmatter":{},"headers":[],"relativePath":"Summary/Proxy.md","filePath":"Summary/Proxy.md","lastUpdated":1683365087000}'),l={name:"Summary/Proxy.md"},p=n(`<h1 id="proxy" tabindex="-1">Proxy <a class="header-anchor" href="#proxy" aria-label="Permalink to &quot;Proxy&quot;">​</a></h1><blockquote><p>MDN:Proxy 对象用于创建一个对象的代理，从而实现基本操作的拦截和自定义（如属性查找、赋值、枚举、函数调用等）。</p></blockquote><h2 id="什么是proxy" tabindex="-1">什么是Proxy <a class="header-anchor" href="#什么是proxy" aria-label="Permalink to &quot;什么是Proxy&quot;">​</a></h2><p>我对<code>Proxy</code>的理解为：<strong>拦截</strong>、<strong>代理</strong>。 我们可以看一个最简单的<code>Proxy</code>demo :</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> obj </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { a: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, b: </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">proxyObj</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Proxy</span><span style="color:#E1E4E8;">(obj, {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">get</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;get trigger&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  },</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">set</span><span style="color:#E1E4E8;">: </span><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> () {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;set trigger&#39;</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">})</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> proxyObj.a</span><span style="color:#6A737D;">//控制台打印&quot;get trigger&quot;</span></span>
<span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> b </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> proxyObj.b</span><span style="color:#6A737D;">//控制台打印&quot;get trigger&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">proxyObj.a </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;a&#39;</span><span style="color:#6A737D;">//控制台打印&quot;set trigger&quot;</span></span>
<span class="line"><span style="color:#E1E4E8;">proxyObj.b</span><span style="color:#F97583;">++</span><span style="color:#6A737D;">//控制台打印&quot;get trigger&quot;和&quot;set trigger&quot;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> obj </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { a: </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, b: </span><span style="color:#005CC5;">2</span><span style="color:#24292E;"> }</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">proxyObj</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Proxy</span><span style="color:#24292E;">(obj, {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">get</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;get trigger&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  },</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">set</span><span style="color:#24292E;">: </span><span style="color:#D73A49;">function</span><span style="color:#24292E;"> () {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;set trigger&#39;</span><span style="color:#24292E;">)</span></span>
<span class="line"><span style="color:#24292E;">  }</span></span>
<span class="line"><span style="color:#24292E;">})</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> proxyObj.a</span><span style="color:#6A737D;">//控制台打印&quot;get trigger&quot;</span></span>
<span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> b </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> proxyObj.b</span><span style="color:#6A737D;">//控制台打印&quot;get trigger&quot;</span></span>
<span class="line"><span style="color:#24292E;">proxyObj.a </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;a&#39;</span><span style="color:#6A737D;">//控制台打印&quot;set trigger&quot;</span></span>
<span class="line"><span style="color:#24292E;">proxyObj.b</span><span style="color:#D73A49;">++</span><span style="color:#6A737D;">//控制台打印&quot;get trigger&quot;和&quot;set trigger&quot;</span></span></code></pre></div><p>上述代码中，我们定义了一个对象<code>obj</code>，拥有<code>a</code>和<code>b</code>两个属性。借助<code>Proxy</code>的构造函数，生成了<code>Proxy</code>实例<code>proxyObj</code>。</p><p>从结果不难看出:用上述代码创建的<code>proxyObj</code>在：</p><ul><li>我们对它进行读操作时，都会打印&quot;get trigger&quot;</li><li>我们对它进行写操作时，都会打印&quot;set trigger&quot;。</li></ul><h2 id="proxy的方法" tabindex="-1">Proxy的方法 <a class="header-anchor" href="#proxy的方法" aria-label="Permalink to &quot;Proxy的方法&quot;">​</a></h2><h3 id="get" tabindex="-1">get() <a class="header-anchor" href="#get" aria-label="Permalink to &quot;get()&quot;">​</a></h3><h3 id="set" tabindex="-1">set() <a class="header-anchor" href="#set" aria-label="Permalink to &quot;set()&quot;">​</a></h3><h2 id="proxy的问题" tabindex="-1">Proxy的问题 <a class="header-anchor" href="#proxy的问题" aria-label="Permalink to &quot;Proxy的问题&quot;">​</a></h2>`,12),e=[p];function t(r,c,y,E,i,d){return a(),o("div",null,e)}const x=s(l,[["render",t]]);export{u as __pageData,x as default};
